<html>
	<head>
		<title>My first three.js app</title>
		<style>
			body { margin: 0; }
			canvas { width: 100%; height: 100% }
		</style>
	</head>
	<body>
         @using PiratesDataBases.Models;
		<script src="~/js/three.js"></script>
        <script type="text/javascript">

        @inject IJsonHelper Json;
        var cerealShipPieces = @Json.Serialize(@ViewBag.shipPieces);
        var cerealShips = @Json.Serialize(@ViewBag.ships);
        console.log(cerealShipPieces);
         console.log(cerealShips);
        </script>
		<script>
            var gameShips = [];
            var shipsDisplaying = [];
            let shipPieces = '@ViewBag.shipPieces' 
			var scene = new THREE.Scene();
			var camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 1000 );

			var renderer = new THREE.WebGLRenderer();
			renderer.setSize( window.innerWidth, window.innerHeight );
			document.body.appendChild( renderer.domElement );
            
            console.log(shipPieces.toString());
           
           cerealShipPieces.forEach(function(shipPiece){
               console.log("FOREACH IS WORKINGS");
               spawnShip(shipPiece)
               });
            console.log(gameShips);
			displayShips();

			camera.position.z = 20;

            setInterval(function(){
                gameShips.forEach(function(ship){
                    ship.xSpeed = (Math.random() - .5) * .2;
                    ship.ySpeed = (Math.random() - .5) * .2;
                })
            }, 5);

			var animate = function () {
			requestAnimationFrame( animate );

			displayShips();

				renderer.render( scene, camera );
                makeShipGo();
			};

			animate();

            function spawnShip(shipPiece){
            let shipTemplate = getShip(shipPiece.shipType);
            let thisShip = {
                team : shipTemplate.team,
                hp : shipTemplate.hp,
                triCannons : shipTemplate.triCannons,
                squareCannons : shipTemplate.squareCannons
            }
            thisShip.xPos = shipPiece.xPos;
            thisShip.yPos = shipPiece.yPos;
            thisShip.xSpeed = 0;
            thisShip.ySpeed = 0;
            thisShip.team = shipPiece.team;
			gameShips.push(thisShip);
            }

            function getShip(shipType){
                console.log(cerealShips.length)
                for(let i = 0; i < cerealShips.length; i++){
                    console.log(cerealShips[i].shipType)
                    if (cerealShips[i].shipType.toLowerCase() == shipType.toLowerCase()){
                        return cerealShips[i];
                    }
                }
                throw shipType + " : not found";
            }

            function displayShips(){
                shipsDisplaying.forEach(function(shipRendering){
                    scene.remove(shipRendering);
                })
                shipsDisplaying = [];
                gameShips.forEach(function(ship){
                    //console.log(ship);
                    var geometry = new THREE.BoxGeometry( ship.hp / 100, .2, .2 );
                if (ship.team == 1){
                    var material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );
                } else if (ship.team == 2){
                    var material = new THREE.MeshBasicMaterial( { color: 0xff0000 } );  
                } else {
                    var material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );  
                }
                
                var cube = new THREE.Mesh( geometry, material );
                //console.log("XPOS OF THIS SHIP: " + ship.xPos);
                cube.position.x = ship.xPos;
                //console.log("YPOS OF THIS SHIP: " + ship.yPos);
                cube.position.y = ship.yPos;
                
                
                cube.rotation.x += 0.01;
                cube.rotation.y += 0.01;
                shipsDisplaying.push(cube);
                scene.add( cube );
                });
            }

            function makeShipGo(){
                gameShips.forEach(function(ship){
                    ship.xPos += ship.xSpeed;
                    ship.yPos += ship.ySpeed;
                    
                })
            }
		</script>
	</body>
</html>